;; gorilla-repl.fileformat = 1

;; **
;;; # CIM Portfolio
;; **

;; **
;;; ### Required packages
;; **

;; @@
(ns cim_portfolio.portfolio
  (:require [cim_portfolio.util :as util]
            [cim_portfolio.yfinanceclient :as client]
            [cim_portfolio.plot :as plot]
            [clojure.math :as math]
            ))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; ### Portfolio Analysis Helper Functions
;; **

;; @@
;; Computes arithmetic, log, and cumulative return for a given list of prices
(defn calculate-returns [prices]
  (let [price-changes (map #(double (/ (second %) (first %))) (partition 2 1 prices))
        arithmetic-returns (mapv #(- % 1.0) price-changes)
        log-returns (mapv #(Math/log %) price-changes)
        cumulative-log-return (reduce + log-returns)]
    {
     :cumulative-return cumulative-log-return
     :arithmetic-returns arithmetic-returns
     :log-returns log-returns
     }))

;; Variation of the above function - additionally associates the returns with their corresponding date
(defn calculate-returns-with-corresponding-date [prices dates]
  (let [price-changes (map #(double (/ (second %) (first %))) (partition 2 1 prices))
        arithmetic-returns (mapv #(- % 1.0) price-changes)
        log-returns (mapv #(Math/log %) price-changes)
        cumulative-log-return (reduce + log-returns)]
    {
     :cumulative-return cumulative-log-return
     :arithmetic-returns (util/sort-map-by-date (zipmap (rest dates) arithmetic-returns))
     :log-returns (util/sort-map-by-date (zipmap (rest dates) log-returns))
     }))

;; Calculates portfolio return - accepts map {:stock cash-invested} and stock-performance generated by calculate-returns
(defn calculate-portfolio-return [cash-invested returns]
  (let [total-investment (apply + (vals cash-invested))]
    (->> cash-invested
         (map (fn [[security invested]]
                (let [weight (/ invested total-investment)
                      return (:cumulative-return (get returns security))]
                  (* weight return))))
         (apply +))))

;; Calculates cumulative return UP TILL a given date
(defn get-cumulative-return-till-given-date [cumulative-returns date]
  (util/sum-up-to-key date cumulative-returns)
)

;; Only calculates portfolio return up till a given date
(defn calculate-portfolio-return-for-given-date [cash-invested returns date]
  (let [total-investment (apply + (vals cash-invested))]
    (->> cash-invested
         (map (fn [[security invested]]
                (let [weight (/ invested total-investment)
                      return (get-cumulative-return-till-given-date (:log-returns (get returns security)) date)
                     ]
                  (* weight return))))
         (apply +))))

; Calculates the annualized return of the portfolio (accepts the starting value, ending value of portfolio, the start and end date)
(defn calculate-annualized-return [starting-value ending-value start-date end-date]
  (let [return (/ (- ending-value starting-value) starting-value)
        number-of-days (util/number-of-days-between start-date end-date)
       ]
    (- (math/pow (+ 1 return) (/ 365 number-of-days)) 1)
  )
)

; Calculates the volatility of a given list of prices (expected input: portfolio value list)
(defn volatility [prices]
  (let [daily-returns (:arithmetic-returns (calculate-returns prices))
        volatility (* 100 (util/std-dev daily-returns))
       ]
    volatility
  )
)

; Calculates the annualized volatility for a given sliding window-size
(defn rolling-annualized-volatility [prices window-size]
  (let [returns (:arithmetic-returns (calculate-returns prices))
        scaling-factor (Math/sqrt 252)
       ]
    (->> returns
         (partition window-size 1)
         (map util/std-dev)
      	 (map #(* 100 % scaling-factor))
    )
  )
)
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;cim_portfolio.portfolio/rolling-annualized-volatility</span>","value":"#'cim_portfolio.portfolio/rolling-annualized-volatility"}
;; <=

;; @@
(def test-prices [100 105 110 103 108 115])

(println test-prices)

(:arithmetic-returns (calculate-returns test-prices)) ;; Daily returns (as percentage of change)

(rolling-annualized-volatility test-prices 3)
;; @@
;; ->
;;; [100 105 110 103 108 115]
;;; 
;; <-
;; =>
;;; {"type":"list-like","open":"<span class='clj-lazy-seq'>(</span>","close":"<span class='clj-lazy-seq'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-double'>103.07568391966036</span>","value":"103.07568391966036"},{"type":"html","content":"<span class='clj-double'>102.39362297746774</span>","value":"102.39362297746774"},{"type":"html","content":"<span class='clj-double'>111.02479003234937</span>","value":"111.02479003234937"}],"value":"(103.07568391966036 102.39362297746774 111.02479003234937)"}
;; <=

;; @@
(calculate-returns test-prices)
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-map'>{</span>","close":"<span class='clj-map'>}</span>","separator":", ","items":[{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:cumulative-return</span>","value":":cumulative-return"},{"type":"html","content":"<span class='clj-double'>0.1397619423751591</span>","value":"0.1397619423751591"}],"value":"[:cumulative-return 0.1397619423751591]"},{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:arithmetic-returns</span>","value":":arithmetic-returns"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-double'>0.050000000000000044</span>","value":"0.050000000000000044"},{"type":"html","content":"<span class='clj-double'>0.047619047619047894</span>","value":"0.047619047619047894"},{"type":"html","content":"<span class='clj-double'>-0.0636363636363636</span>","value":"-0.0636363636363636"},{"type":"html","content":"<span class='clj-double'>0.048543689320388106</span>","value":"0.048543689320388106"},{"type":"html","content":"<span class='clj-double'>0.0648148148148151</span>","value":"0.0648148148148151"}],"value":"[0.050000000000000044 0.047619047619047894 -0.0636363636363636 0.048543689320388106 0.0648148148148151]"}],"value":"[:arithmetic-returns [0.050000000000000044 0.047619047619047894 -0.0636363636363636 0.048543689320388106 0.0648148148148151]]"},{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:log-returns</span>","value":":log-returns"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-double'>0.04879016416943205</span>","value":"0.04879016416943205"},{"type":"html","content":"<span class='clj-double'>0.04652001563489312</span>","value":"0.04652001563489312"},{"type":"html","content":"<span class='clj-double'>-0.06575137756278042</span>","value":"-0.06575137756278042"},{"type":"html","content":"<span class='clj-double'>0.04740223889458369</span>","value":"0.04740223889458369"},{"type":"html","content":"<span class='clj-double'>0.06280090123903065</span>","value":"0.06280090123903065"}],"value":"[0.04879016416943205 0.04652001563489312 -0.06575137756278042 0.04740223889458369 0.06280090123903065]"}],"value":"[:log-returns [0.04879016416943205 0.04652001563489312 -0.06575137756278042 0.04740223889458369 0.06280090123903065]]"}],"value":"{:cumulative-return 0.1397619423751591, :arithmetic-returns [0.050000000000000044 0.047619047619047894 -0.0636363636363636 0.048543689320388106 0.0648148148148151], :log-returns [0.04879016416943205 0.04652001563489312 -0.06575137756278042 0.04740223889458369 0.06280090123903065]}"}
;; <=

;; @@
(calculate-annualized-return 2000 2500 "2023-10-16" "2024-04-27")
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-double'>0.5217057952294997</span>","value":"0.5217057952294997"}
;; <=

;; **
;;; ### YFinance API
;; **

;; @@
(client/get-ticker-price-all "NVDA" "2025-02-15")
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-string'>&quot;2025-02-18&quot;</span>","value":"\"2025-02-18\""},{"type":"html","content":"<span class='clj-double'>141.2700042725</span>","value":"141.2700042725"},{"type":"html","content":"<span class='clj-double'>139.3999938965</span>","value":"139.3999938965"}],"value":"[\"2025-02-18\" 141.2700042725 139.3999938965]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-string'>&quot;2025-02-19&quot;</span>","value":"\"2025-02-19\""},{"type":"html","content":"<span class='clj-double'>139.5099945068</span>","value":"139.5099945068"},{"type":"html","content":"<span class='clj-double'>139.2299957275</span>","value":"139.2299957275"}],"value":"[\"2025-02-19\" 139.5099945068 139.2299957275]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-string'>&quot;2025-02-20&quot;</span>","value":"\"2025-02-20\""},{"type":"html","content":"<span class='clj-double'>140.0299987793</span>","value":"140.0299987793"},{"type":"html","content":"<span class='clj-double'>140.1100006104</span>","value":"140.1100006104"}],"value":"[\"2025-02-20\" 140.0299987793 140.1100006104]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-string'>&quot;2025-02-21&quot;</span>","value":"\"2025-02-21\""},{"type":"html","content":"<span class='clj-double'>140.0399932861</span>","value":"140.0399932861"},{"type":"html","content":"<span class='clj-double'>134.4299926758</span>","value":"134.4299926758"}],"value":"[\"2025-02-21\" 140.0399932861 134.4299926758]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-string'>&quot;2025-02-24&quot;</span>","value":"\"2025-02-24\""},{"type":"html","content":"<span class='clj-double'>136.5599975586</span>","value":"136.5599975586"},{"type":"html","content":"<span class='clj-double'>130.2799987793</span>","value":"130.2799987793"}],"value":"[\"2025-02-24\" 136.5599975586 130.2799987793]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-string'>&quot;2025-02-25&quot;</span>","value":"\"2025-02-25\""},{"type":"html","content":"<span class='clj-double'>129.9799957275</span>","value":"129.9799957275"},{"type":"html","content":"<span class='clj-double'>126.6299972534</span>","value":"126.6299972534"}],"value":"[\"2025-02-25\" 129.9799957275 126.6299972534]"}],"value":"[[\"2025-02-18\" 141.2700042725 139.3999938965] [\"2025-02-19\" 139.5099945068 139.2299957275] [\"2025-02-20\" 140.0299987793 140.1100006104] [\"2025-02-21\" 140.0399932861 134.4299926758] [\"2025-02-24\" 136.5599975586 130.2799987793] [\"2025-02-25\" 129.9799957275 126.6299972534]]"}
;; <=

;; **
;;; ### Portfolio Processing Section
;; **

;; @@
(defn analyze-portfolio [data]
  (loop [cash 0.0
         portfolio {}
         portfolio-value {}
         current-value 0.0
         stock-performance {}
         cash-invested {}
         cash-invested-by-date {}
         data (rest data)]
    (if (empty? data)
      [cash portfolio portfolio-value current-value cash-invested cash-invested-by-date stock-performance]
      (let [[date action amount ticker] (first data)
            ticker-prices (client/get-ticker-price-all ticker (util/parse-date date))
            executed-date (first (first ticker-prices))				; gets the date the buy/sell order is executed
            ]
        (cond
          (= (clojure.string/lower-case action) "buy")
          (if (pos? (Double. amount))
            (let [price (second (first ticker-prices))        			; Gets open price of next trading day
                  currPrice (nth (last ticker-prices) 2)				; Gets adj close price of latest day
                  prices (mapv #(nth % 2) ticker-prices)       			; Extracts the prices from ticker-prices
                  amounts (repeatedly (count prices) #(Double. amount))	; Repeats amount for num of trading days
                  trading-dates (mapv #(first %) ticker-prices)
                  ]
              (recur (- cash (* (Double. amount) price))
                     (assoc portfolio ticker (+ (get portfolio ticker 0) (Double. amount)))
                     (merge-with + portfolio-value (zipmap (map first ticker-prices) 
                                                           (map #(- % (* (Double. amount) price))(map * prices amounts)))) 
                     ; Updates portfolio-value with the calculated values
                     (+ current-value (* (Double. amount) currPrice))
                     
                     (assoc stock-performance ticker (calculate-returns-with-corresponding-date prices trading-dates))
                     (assoc cash-invested ticker (+ (get cash-invested ticker 0) (* (Double. amount) price)))
                     (assoc cash-invested-by-date executed-date (assoc cash-invested ticker (+ (get cash-invested ticker 0) (* (Double. amount) price))))
                     (rest data)))
            (recur cash portfolio portfolio-value current-value cash-invested cash-invested-by-date stock-performance (rest data)))

          (= (clojure.string/lower-case action) "sell")
          (let [price (second (first ticker-prices))
                currPrice (second (last ticker-prices))
                prices (map second ticker-prices)
                amounts (repeatedly (count prices) #(Double. amount))
                trading-dates (mapv #(first %) ticker-prices)
                ]
            (recur (+ cash (* (Double. amount) price))
                   (assoc portfolio ticker (- (get portfolio ticker 0) (Double. amount)))
                   (merge-with + portfolio-value (zipmap (map first ticker-prices) 
                                                         (map #(- (* (Double. amount) price) %) (map * prices amounts))))
                   (- current-value (* (Double. amount) currPrice))
                   
                   (assoc stock-performance ticker (calculate-returns-with-corresponding-date prices trading-dates))
                   (assoc cash-invested ticker (- (get cash-invested ticker 0) (* (Double. amount) price)))
                   (assoc cash-invested-by-date executed-date (assoc cash-invested ticker (- (get cash-invested ticker 0) (* (Double. amount) price))))
                   (rest data)))
          )))))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;cim_portfolio.portfolio/analyze-portfolio</span>","value":"#'cim_portfolio.portfolio/analyze-portfolio"}
;; <=

;; @@
(def portfolio-options {
                        :starting-cash 1000000
                       }
)

(def view-options {
                   :show-individual-stock-performance-by-day 	false
                   :show-cumulative-portfolio-return-by-day		true
                   :show-portfolio-value-by-day					true
                  }
)
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;cim_portfolio.portfolio/view-options</span>","value":"#'cim_portfolio.portfolio/view-options"}
;; <=

;; @@
;; Please enter the relative paths of 1 or more CSV files (in a list) containing your trades below:

(def input-files ["./examples/utilities.csv"])

(let [data (util/read-multiple-csv input-files)
      [cash portfolio portfolio-value current-value cash-invested cash-invested-by-date stock-performance] (analyze-portfolio data)
      sorted-portfolio-value 	(map #(vector (first %) (+ (:starting-cash portfolio-options) (second %))) 
                                     (util/sort-map-by-date portfolio-value))
      cash-invested-by-dates 	(into [] cash-invested-by-date)
      current-portfolio-value 	(+ (:starting-cash portfolio-options) (+ cash current-value))
      annualized-return 		(calculate-annualized-return (:starting-cash portfolio-options) current-portfolio-value (first (first sorted-portfolio-value)) (last (last sorted-portfolio-value)))
      cumulative-portfolio-return (calculate-portfolio-return cash-invested stock-performance)
      returns-by-date 			(zipmap (map #(first %) cash-invested-by-date)(mapv #(calculate-portfolio-return-for-given-date (second %) stock-performance (first %)) cash-invested-by-dates))
      volatility 				(volatility (map second sorted-portfolio-value))
      ]
  (def portfolio-value-by-day sorted-portfolio-value)
  
  (println "Current Portfolio Value: $" 	(format "%.2f" current-portfolio-value) 
           " [Cash: ~$" 					(format "%.2f" (+ (:starting-cash portfolio-options) cash))
           "| Stocks: ~$" 					(format "%.2f" (- current-portfolio-value (+ (:starting-cash portfolio-options) 											cash))) "] \n")
  
  (println "Annualized Return of portfolio:" (format "%.2f" (* annualized-return 100)) "%\n")
  
  (println "Volatility of portfolio:" (format "%.4f" volatility) "%\n")
  (println "Annualized volatility of portfolio:" (format "%.4f" (* (Math/sqrt 252) volatility)) "%\n")
  
  (println "Portfolio (units held/shorted of each stock):" portfolio "\n")
  (println "Cash invested in each stock: " cash-invested "\n")
  (println "Cumulative Portfolio Return: " cumulative-portfolio-return "\n")
  
  (println "----------------------------------")
  (if (:show-cumulative-portfolio-return-by-day view-options) (println "Portfolio Return by date: \n" returns-by-date))
  (println "----------------------------------\n")
  
  (println "----------------------------------")
  (println "Portfolio Value Day-by-Day: ")
  (if (:show-portfolio-value-by-day view-options) 
    (run! println (map #(vector (first %) (format "%.2f" (second %))) sorted-portfolio-value))
    (println "Omitting...")
  )
  (println "----------------------------------\n")
  
  (println "----------------------------------")
  (println "Individual Stock Performance: ")
  (if (:show-individual-stock-performance-by-day view-options) 
    (clojure.pprint/pprint stock-performance)
    (println "Omitting...")
  )
  (println "----------------------------------\n")
)
;; @@
;; ->
;;; Current Portfolio Value: $ 1031340.00  [Cash: ~$ 309459.99 | Stocks: ~$ 721880.00 ] 
;;; 
;;; Annualized Return of portfolio: 4.61 %
;;; 
;;; Volatility of portfolio: 0.9592 %
;;; 
;;; Annualized volatility of portfolio: 15.2271 %
;;; 
;;; Portfolio (units held/shorted of each stock): {QQQ 1000.0, SRE 1000.0, VST 1000.0} 
;;; 
;;; Cash invested in each stock:  {QQQ 481190.0024414, SRE 83440.00244139999, VST 125910.00366209999} 
;;; 
;;; Cumulative Portfolio Return:  0.04783840001554518 
;;; 
;;; ----------------------------------
;;; Portfolio Return by date: 
;;;  {2024-06-21 0.07134202556931261, 2024-09-23 -0.015944675703244305, 2024-10-24 0.04023746363789693}
;;; ----------------------------------
;;; 
;;; ----------------------------------
;;; Portfolio Value Day-by-Day: 
;;; [2024-06-21 996784.52]
;;; [2024-06-24 991342.93]
;;; [2024-06-25 996746.61]
;;; [2024-06-26 997733.64]
;;; [2024-06-27 998969.88]
;;; [2024-06-28 996477.42]
;;; [2024-07-01 999278.99]
;;; [2024-07-02 1004323.76]
;;; [2024-07-03 1008371.52]
;;; [2024-07-05 1013476.10]
;;; [2024-07-08 1014652.53]
;;; [2024-07-09 1015081.24]
;;; [2024-07-10 1020255.62]
;;; [2024-07-11 1009258.82]
;;; [2024-07-12 1012140.14]
;;; [2024-07-15 1013466.13]
;;; [2024-07-16 1013655.55]
;;; [2024-07-17 999129.43]
;;; [2024-07-18 996856.26]
;;; [2024-07-19 992619.05]
;;; [2024-07-22 999677.76]
;;; [2024-07-23 997982.88]
;;; [2024-07-24 980794.80]
;;; [2024-07-25 975700.16]
;;; [2024-07-26 980386.05]
;;; [2024-07-29 981313.20]
;;; [2024-07-30 974962.43]
;;; [2024-07-31 988461.64]
;;; [2024-08-01 977086.00]
;;; [2024-08-02 966208.86]
;;; [2024-08-05 952869.14]
;;; [2024-08-06 957016.60]
;;; [2024-08-07 952270.90]
;;; [2024-08-08 965530.91]
;;; [2024-08-09 967863.83]
;;; [2024-08-12 968830.93]
;;; [2024-08-13 979997.19]
;;; [2024-08-14 980146.76]
;;; [2024-08-15 991801.54]
;;; [2024-08-16 992409.70]
;;; [2024-08-19 998630.92]
;;; [2024-08-20 997623.96]
;;; [2024-08-21 999857.21]
;;; [2024-08-22 992230.26]
;;; [2024-08-23 997364.75]
;;; [2024-08-26 992718.78]
;;; [2024-08-27 994134.52]
;;; [2024-08-28 988740.78]
;;; [2024-08-29 988052.89]
;;; [2024-08-30 993645.97]
;;; [2024-09-03 979229.52]
;;; [2024-09-04 978033.11]
;;; [2024-09-05 978461.82]
;;; [2024-09-06 966149.02]
;;; [2024-09-09 971901.61]
;;; [2024-09-10 976089.02]
;;; [2024-09-11 986018.98]
;;; [2024-09-12 990605.16]
;;; [2024-09-13 992718.78]
;;; [2024-09-16 990625.09]
;;; [2024-09-17 990874.36]
;;; [2024-09-18 988830.54]
;;; [2024-09-19 1000714.63]
;;; [2024-09-20 999797.39]
;;; [2024-09-23 1000479.39]
;;; [2024-09-24 1001800.09]
;;; [2024-09-25 1002229.66]
;;; [2024-09-26 1005436.78]
;;; [2024-09-27 1004022.26]
;;; [2024-09-30 1005717.56]
;;; [2024-10-01 999216.53]
;;; [2024-10-02 999359.12]
;;; [2024-10-03 998155.44]
;;; [2024-10-04 1003945.76]
;;; [2024-10-07 997651.54]
;;; [2024-10-08 1004939.28]
;;; [2024-10-09 1008693.66]
;;; [2024-10-10 1007945.88]
;;; [2024-10-11 1009538.99]
;;; [2024-10-14 1014655.64]
;;; [2024-10-15 1008890.40]
;;; [2024-10-16 1010569.26]
;;; [2024-10-17 1010739.85]
;;; [2024-10-18 1014421.48]
;;; [2024-10-21 1014346.95]
;;; [2024-10-22 1014965.50]
;;; [2024-10-23 1008321.29]
;;; [2024-10-24 1011553.02]
;;; [2024-10-25 1011620.12]
;;; [2024-10-28 1016228.57]
;;; [2024-10-29 1018253.72]
;;; [2024-10-30 1011933.91]
;;; [2024-10-31 1000093.93]
;;; [2024-11-01 996518.62]
;;; [2024-11-04 990502.71]
;;; [2024-11-05 1004272.99]
;;; [2024-11-06 1027773.97]
;;; [2024-11-07 1046835.35]
;;; [2024-11-08 1055074.39]
;;; [2024-11-11 1059532.63]
;;; [2024-11-12 1055049.45]
;;; [2024-11-13 1054340.67]
;;; [2024-11-14 1045394.20]
;;; [2024-11-15 1038715.87]
;;; [2024-11-18 1047358.11]
;;; [2024-11-19 1059466.14]
;;; [2024-11-20 1058688.77]
;;; [2024-11-21 1074015.81]
;;; [2024-11-22 1069724.96]
;;; [2024-11-25 1063252.84]
;;; [2024-11-26 1073004.71]
;;; [2024-11-27 1061857.60]
;;; [2024-11-29 1070995.99]
;;; [2024-12-02 1069256.95]
;;; [2024-12-03 1070794.99]
;;; [2024-12-04 1083806.57]
;;; [2024-12-05 1081989.59]
;;; [2024-12-06 1084413.51]
;;; [2024-12-09 1067849.01]
;;; [2024-12-10 1059062.85]
;;; [2024-12-11 1071700.59]
;;; [2024-12-12 1067887.64]
;;; [2024-12-13 1072951.45]
;;; [2024-12-16 1080488.43]
;;; [2024-12-17 1070901.21]
;;; [2024-12-18 1042863.45]
;;; [2024-12-19 1045680.21]
;;; [2024-12-20 1054044.94]
;;; [2024-12-23 1060159.98]
;;; [2024-12-24 1070740.01]
;;; [2024-12-26 1070779.97]
;;; [2024-12-27 1059469.98]
;;; [2024-12-30 1052509.97]
;;; [2024-12-31 1046280.00]
;;; [2025-01-02 1056480.00]
;;; [2025-01-03 1078070.01]
;;; [2025-01-06 1082459.97]
;;; [2025-01-07 1072239.98]
;;; [2025-01-08 1068360.01]
;;; [2025-01-10 1062109.99]
;;; [2025-01-13 1054090.00]
;;; [2025-01-14 1063159.97]
;;; [2025-01-15 1077750.00]
;;; [2025-01-16 1080530.01]
;;; [2025-01-17 1087239.98]
;;; [2025-01-21 1106119.99]
;;; [2025-01-22 1110630.00]
;;; [2025-01-23 1116800.00]
;;; [2025-01-24 1112910.00]
;;; [2025-01-27 1042900.02]
;;; [2025-01-28 1062659.99]
;;; [2025-01-29 1067480.02]
;;; [2025-01-30 1092099.98]
;;; [2025-01-31 1082709.97]
;;; [2025-02-03 1078689.97]
;;; [2025-02-04 1083689.96]
;;; [2025-02-05 1090219.97]
;;; [2025-02-06 1091019.97]
;;; [2025-02-07 1081259.97]
;;; [2025-02-10 1089309.99]
;;; [2025-02-11 1088489.98]
;;; [2025-02-12 1087299.98]
;;; [2025-02-13 1094870.01]
;;; [2025-02-14 1099370.02]
;;; [2025-02-18 1102729.99]
;;; [2025-02-19 1103670.01]
;;; [2025-02-20 1095879.97]
;;; [2025-02-21 1073080.01]
;;; [2025-02-24 1059269.98]
;;; [2025-02-25 1031340.00]
;;; ----------------------------------
;;; 
;;; ----------------------------------
;;; Individual Stock Performance: 
;;; Omitting...
;;; ----------------------------------
;;; 
;;; 
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; ### Visualization
;;; 
;;; #### Portfolio Value
;; **

;; @@
(plot/list-plot (cons (:starting-cash portfolio-options) (map #(second %) portfolio-value-by-day)) :joined true :plot-size 800 :x-title "Day" :y-title "Portfolio Value (in $)" :color "#7f3b08")
;; @@
;; =>
;;; {"type":"vega","content":{"width":800,"height":494.4376,"padding":{"top":10,"left":80,"bottom":50,"right":10},"data":[{"name":"42376603-d6b0-4fb8-96ca-f8db6099671b","values":[{"x":0,"y":1000000},{"x":1,"y":996784.5153809},{"x":2,"y":991342.9260253999},{"x":3,"y":996746.6125488},{"x":4,"y":997733.6425781},{"x":5,"y":998969.8791503999},{"x":6,"y":996477.4169922},{"x":7,"y":999278.9916991999},{"x":8,"y":1004323.7609863},{"x":9,"y":1008371.5209961},{"x":10,"y":1013476.1047363},{"x":11,"y":1014652.5268555},{"x":12,"y":1015081.237793},{"x":13,"y":1020255.6152343999},{"x":14,"y":1009258.8195801},{"x":15,"y":1012140.1367188001},{"x":16,"y":1013466.1254883},{"x":17,"y":1013655.5480957},{"x":18,"y":999129.4250488},{"x":19,"y":996856.2622069999},{"x":20,"y":992619.0490723},{"x":21,"y":999677.7648926},{"x":22,"y":997982.8796387},{"x":23,"y":980794.7998047},{"x":24,"y":975700.1647949},{"x":25,"y":980386.0473633},{"x":26,"y":981313.2019042999},{"x":27,"y":974962.4328613},{"x":28,"y":988461.6394042999},{"x":29,"y":977085.9985352},{"x":30,"y":966208.8623047},{"x":31,"y":952869.140625},{"x":32,"y":957016.6015625},{"x":33,"y":952270.904541},{"x":34,"y":965530.9143065999},{"x":35,"y":967863.8305664},{"x":36,"y":968830.9326172},{"x":37,"y":979997.1923827999},{"x":38,"y":980146.7590332},{"x":39,"y":991801.5441894999},{"x":40,"y":992409.6984863},{"x":41,"y":998630.9204102},{"x":42,"y":997623.9624024},{"x":43,"y":999857.2082519999},{"x":44,"y":992230.2551269999},{"x":45,"y":997364.7460938001},{"x":46,"y":992718.7805176},{"x":47,"y":994134.5214843999},{"x":48,"y":988740.7836914},{"x":49,"y":988052.8869628999},{"x":50,"y":993645.9655762},{"x":51,"y":979229.5227051},{"x":52,"y":978033.1115723},{"x":53,"y":978461.8225098},{"x":54,"y":966149.017334},{"x":55,"y":971901.6113281},{"x":56,"y":976089.0197753999},{"x":57,"y":986018.9819336},{"x":58,"y":990605.1635741999},{"x":59,"y":992718.7805176},{"x":60,"y":990625.0915526999},{"x":61,"y":990874.3591309},{"x":62,"y":988830.5358887},{"x":63,"y":1000714.6301269999},{"x":64,"y":999797.3937988},{"x":65,"y":1000479.3853759},{"x":66,"y":1001800.0946045},{"x":67,"y":1002229.6600342001},{"x":68,"y":1005436.7828369},{"x":69,"y":1004022.2625732},{"x":70,"y":1005717.5598145},{"x":71,"y":999216.5298462},{"x":72,"y":999359.1156005999},{"x":73,"y":998155.4412841},{"x":74,"y":1003945.7626342999},{"x":75,"y":997651.5426636001},{"x":76,"y":1004939.2776489},{"x":77,"y":1008693.6645508},{"x":78,"y":1007945.8770752},{"x":79,"y":1009538.9862061},{"x":80,"y":1014655.6396484},{"x":81,"y":1008890.3961180999},{"x":82,"y":1010569.2596436},{"x":83,"y":1010739.8529053},{"x":84,"y":1014421.4782715},{"x":85,"y":1014346.9467163},{"x":86,"y":1014965.4998779},{"x":87,"y":1008321.2890625},{"x":88,"y":1011553.0166627},{"x":89,"y":1011620.124817},{"x":90,"y":1016228.5690308},{"x":91,"y":1018253.7155152},{"x":92,"y":1011933.9141846},{"x":93,"y":1000093.9331055001},{"x":94,"y":996518.6233521},{"x":95,"y":990502.7084351},{"x":96,"y":1004272.9949952001},{"x":97,"y":1027773.9715576},{"x":98,"y":1046835.3500367},{"x":99,"y":1055074.3942261},{"x":100,"y":1059532.6309205},{"x":101,"y":1055049.4461059999},{"x":102,"y":1054340.6677246},{"x":103,"y":1045394.2031861},{"x":104,"y":1038715.866089},{"x":105,"y":1047358.1085206},{"x":106,"y":1059466.1407472},{"x":107,"y":1058688.774109},{"x":108,"y":1074015.8081055},{"x":109,"y":1069724.9603271},{"x":110,"y":1063252.8381348},{"x":111,"y":1073004.7149658},{"x":112,"y":1061857.6049805},{"x":113,"y":1070995.9869385},{"x":114,"y":1069256.9503785},{"x":115,"y":1070794.9905395},{"x":116,"y":1083806.5719605},{"x":117,"y":1081989.5935059},{"x":118,"y":1084413.5055542},{"x":119,"y":1067849.0142822},{"x":120,"y":1059062.8509522},{"x":121,"y":1071700.592041},{"x":122,"y":1067887.6419068},{"x":123,"y":1072951.4465332},{"x":124,"y":1080488.4262085},{"x":125,"y":1070901.2069703},{"x":126,"y":1042863.4490967},{"x":127,"y":1045680.2139283},{"x":128,"y":1054044.9371338},{"x":129,"y":1060159.9807739},{"x":130,"y":1070740.0131227},{"x":131,"y":1070779.9682618},{"x":132,"y":1059469.9783326},{"x":133,"y":1052509.9716187},{"x":134,"y":1046279.9987793},{"x":135,"y":1056480.0033569},{"x":136,"y":1078070.0073242},{"x":137,"y":1082459.9685668},{"x":138,"y":1072239.982605},{"x":139,"y":1068360.0082397},{"x":140,"y":1062109.9929809},{"x":141,"y":1054089.9963379},{"x":142,"y":1063159.9731446},{"x":143,"y":1077749.9999998999},{"x":144,"y":1080530.0064087},{"x":145,"y":1087239.9826051},{"x":146,"y":1106119.9874878},{"x":147,"y":1110630.0048829},{"x":148,"y":1116800.0030517},{"x":149,"y":1112909.9960328},{"x":150,"y":1042900.0167848},{"x":151,"y":1062659.9884033},{"x":152,"y":1067480.0186156998},{"x":153,"y":1092099.9832154},{"x":154,"y":1082709.9685669},{"x":155,"y":1078689.9719239},{"x":156,"y":1083689.9642945},{"x":157,"y":1090219.9707032},{"x":158,"y":1091019.9737549},{"x":159,"y":1081259.9716187},{"x":160,"y":1089309.9899292},{"x":161,"y":1088489.9826051},{"x":162,"y":1087299.9801637},{"x":163,"y":1094870.0103761},{"x":164,"y":1099370.0180054},{"x":165,"y":1102729.9880982},{"x":166,"y":1103670.0134277},{"x":167,"y":1095879.9667359001},{"x":168,"y":1073080.0094603999},{"x":169,"y":1059269.9813843},{"x":170,"y":1031339.9963378}]}],"marks":[{"type":"line","from":{"data":"42376603-d6b0-4fb8-96ca-f8db6099671b"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"stroke":{"value":"#7f3b08"},"strokeWidth":{"value":3},"strokeOpacity":{"value":1}}}}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"42376603-d6b0-4fb8-96ca-f8db6099671b","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"42376603-d6b0-4fb8-96ca-f8db6099671b","field":"data.y"}}],"axes":[{"type":"x","scale":"x","title":"Day","titleOffset":40,"grid":true},{"type":"y","scale":"y","title":"Portfolio Value (in $)","titleOffset":65,"grid":true}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 800, :height 494.4376, :padding {:top 10, :left 80, :bottom 50, :right 10}, :data [{:name \"42376603-d6b0-4fb8-96ca-f8db6099671b\", :values ({:x 0, :y 1000000} {:x 1, :y 996784.5153809} {:x 2, :y 991342.9260253999} {:x 3, :y 996746.6125488} {:x 4, :y 997733.6425781} {:x 5, :y 998969.8791503999} {:x 6, :y 996477.4169922} {:x 7, :y 999278.9916991999} {:x 8, :y 1004323.7609863} {:x 9, :y 1008371.5209961} {:x 10, :y 1013476.1047363} {:x 11, :y 1014652.5268555} {:x 12, :y 1015081.237793} {:x 13, :y 1020255.6152343999} {:x 14, :y 1009258.8195801} {:x 15, :y 1012140.1367188001} {:x 16, :y 1013466.1254883} {:x 17, :y 1013655.5480957} {:x 18, :y 999129.4250488} {:x 19, :y 996856.2622069999} {:x 20, :y 992619.0490723} {:x 21, :y 999677.7648926} {:x 22, :y 997982.8796387} {:x 23, :y 980794.7998047} {:x 24, :y 975700.1647949} {:x 25, :y 980386.0473633} {:x 26, :y 981313.2019042999} {:x 27, :y 974962.4328613} {:x 28, :y 988461.6394042999} {:x 29, :y 977085.9985352} {:x 30, :y 966208.8623047} {:x 31, :y 952869.140625} {:x 32, :y 957016.6015625} {:x 33, :y 952270.904541} {:x 34, :y 965530.9143065999} {:x 35, :y 967863.8305664} {:x 36, :y 968830.9326172} {:x 37, :y 979997.1923827999} {:x 38, :y 980146.7590332} {:x 39, :y 991801.5441894999} {:x 40, :y 992409.6984863} {:x 41, :y 998630.9204102} {:x 42, :y 997623.9624024} {:x 43, :y 999857.2082519999} {:x 44, :y 992230.2551269999} {:x 45, :y 997364.7460938001} {:x 46, :y 992718.7805176} {:x 47, :y 994134.5214843999} {:x 48, :y 988740.7836914} {:x 49, :y 988052.8869628999} {:x 50, :y 993645.9655762} {:x 51, :y 979229.5227051} {:x 52, :y 978033.1115723} {:x 53, :y 978461.8225098} {:x 54, :y 966149.017334} {:x 55, :y 971901.6113281} {:x 56, :y 976089.0197753999} {:x 57, :y 986018.9819336} {:x 58, :y 990605.1635741999} {:x 59, :y 992718.7805176} {:x 60, :y 990625.0915526999} {:x 61, :y 990874.3591309} {:x 62, :y 988830.5358887} {:x 63, :y 1000714.6301269999} {:x 64, :y 999797.3937988} {:x 65, :y 1000479.3853759} {:x 66, :y 1001800.0946045} {:x 67, :y 1002229.6600342001} {:x 68, :y 1005436.7828369} {:x 69, :y 1004022.2625732} {:x 70, :y 1005717.5598145} {:x 71, :y 999216.5298462} {:x 72, :y 999359.1156005999} {:x 73, :y 998155.4412841} {:x 74, :y 1003945.7626342999} {:x 75, :y 997651.5426636001} {:x 76, :y 1004939.2776489} {:x 77, :y 1008693.6645508} {:x 78, :y 1007945.8770752} {:x 79, :y 1009538.9862061} {:x 80, :y 1014655.6396484} {:x 81, :y 1008890.3961180999} {:x 82, :y 1010569.2596436} {:x 83, :y 1010739.8529053} {:x 84, :y 1014421.4782715} {:x 85, :y 1014346.9467163} {:x 86, :y 1014965.4998779} {:x 87, :y 1008321.2890625} {:x 88, :y 1011553.0166627} {:x 89, :y 1011620.124817} {:x 90, :y 1016228.5690308} {:x 91, :y 1018253.7155152} {:x 92, :y 1011933.9141846} {:x 93, :y 1000093.9331055001} {:x 94, :y 996518.6233521} {:x 95, :y 990502.7084351} {:x 96, :y 1004272.9949952001} {:x 97, :y 1027773.9715576} {:x 98, :y 1046835.3500367} {:x 99, :y 1055074.3942261} {:x 100, :y 1059532.6309205} {:x 101, :y 1055049.4461059999} {:x 102, :y 1054340.6677246} {:x 103, :y 1045394.2031861} {:x 104, :y 1038715.866089} {:x 105, :y 1047358.1085206} {:x 106, :y 1059466.1407472} {:x 107, :y 1058688.774109} {:x 108, :y 1074015.8081055} {:x 109, :y 1069724.9603271} {:x 110, :y 1063252.8381348} {:x 111, :y 1073004.7149658} {:x 112, :y 1061857.6049805} {:x 113, :y 1070995.9869385} {:x 114, :y 1069256.9503785} {:x 115, :y 1070794.9905395} {:x 116, :y 1083806.5719605} {:x 117, :y 1081989.5935059} {:x 118, :y 1084413.5055542} {:x 119, :y 1067849.0142822} {:x 120, :y 1059062.8509522} {:x 121, :y 1071700.592041} {:x 122, :y 1067887.6419068} {:x 123, :y 1072951.4465332} {:x 124, :y 1080488.4262085} {:x 125, :y 1070901.2069703} {:x 126, :y 1042863.4490967} {:x 127, :y 1045680.2139283} {:x 128, :y 1054044.9371338} {:x 129, :y 1060159.9807739} {:x 130, :y 1070740.0131227} {:x 131, :y 1070779.9682618} {:x 132, :y 1059469.9783326} {:x 133, :y 1052509.9716187} {:x 134, :y 1046279.9987793} {:x 135, :y 1056480.0033569} {:x 136, :y 1078070.0073242} {:x 137, :y 1082459.9685668} {:x 138, :y 1072239.982605} {:x 139, :y 1068360.0082397} {:x 140, :y 1062109.9929809} {:x 141, :y 1054089.9963379} {:x 142, :y 1063159.9731446} {:x 143, :y 1077749.9999998999} {:x 144, :y 1080530.0064087} {:x 145, :y 1087239.9826051} {:x 146, :y 1106119.9874878} {:x 147, :y 1110630.0048829} {:x 148, :y 1116800.0030517} {:x 149, :y 1112909.9960328} {:x 150, :y 1042900.0167848} {:x 151, :y 1062659.9884033} {:x 152, :y 1067480.0186156998} {:x 153, :y 1092099.9832154} {:x 154, :y 1082709.9685669} {:x 155, :y 1078689.9719239} {:x 156, :y 1083689.9642945} {:x 157, :y 1090219.9707032} {:x 158, :y 1091019.9737549} {:x 159, :y 1081259.9716187} {:x 160, :y 1089309.9899292} {:x 161, :y 1088489.9826051} {:x 162, :y 1087299.9801637} {:x 163, :y 1094870.0103761} {:x 164, :y 1099370.0180054} {:x 165, :y 1102729.9880982} {:x 166, :y 1103670.0134277} {:x 167, :y 1095879.9667359001} {:x 168, :y 1073080.0094603999} {:x 169, :y 1059269.9813843} {:x 170, :y 1031339.9963378})}], :marks [{:type \"line\", :from {:data \"42376603-d6b0-4fb8-96ca-f8db6099671b\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :stroke {:value \"#7f3b08\"}, :strokeWidth {:value 3}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"42376603-d6b0-4fb8-96ca-f8db6099671b\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"42376603-d6b0-4fb8-96ca-f8db6099671b\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\", :title \"Day\", :titleOffset 40, :grid true} {:type \"y\", :scale \"y\", :title \"Portfolio Value (in $)\", :titleOffset 65, :grid true}]}}"}
;; <=

;; **
;;; #### 30 Day Rolling Annualized Volatility of Portfolio
;; **

;; @@
;; 21 trading days in a month therefore 21 window-size used

(plot/list-plot (rolling-annualized-volatility (map second portfolio-value-by-day) 21)
                :joined true :plot-size 800 :x-title "Time" :y-title "Annualized Volatility (in %)" :color "red") 
;; @@
;; =>
;;; {"type":"vega","content":{"width":800,"height":494.4376,"padding":{"top":10,"left":80,"bottom":50,"right":10},"data":[{"name":"0f082637-8c6e-4796-97b5-c099ae8b8394","values":[{"x":0,"y":8.541649284612566},{"x":1,"y":10.293680330069462},{"x":2,"y":10.179577572502227},{"x":3,"y":10.357417880899288},{"x":4,"y":10.350585946226577},{"x":5,"y":10.521521058247318},{"x":6,"y":11.660247760694062},{"x":7,"y":12.072235941430446},{"x":8,"y":12.370674665896919},{"x":9,"y":12.734309916822625},{"x":10,"y":12.909395376919067},{"x":11,"y":12.87735283727527},{"x":12,"y":13.899682244133551},{"x":13,"y":13.669314599960305},{"x":14,"y":13.601957121843473},{"x":15,"y":14.35874330739241},{"x":16,"y":14.358222970613822},{"x":17,"y":14.292811445696307},{"x":18,"y":14.277834236713677},{"x":19,"y":14.36418207176752},{"x":20,"y":14.154817002500822},{"x":21,"y":14.163146632271538},{"x":22,"y":13.0265618128831},{"x":23,"y":12.941945805212349},{"x":24,"y":13.013640899280562},{"x":25,"y":13.016185165205208},{"x":26,"y":12.948931989385782},{"x":27,"y":12.036506731258179},{"x":28,"y":11.420382616756973},{"x":29,"y":11.915000916189618},{"x":30,"y":10.727566853039603},{"x":31,"y":10.671102438405958},{"x":32,"y":11.508597597825693},{"x":33,"y":10.65539420191013},{"x":34,"y":10.721924861607969},{"x":35,"y":11.242200628414423},{"x":36,"y":10.65760777057113},{"x":37,"y":10.67075406806816},{"x":38,"y":9.88189765712977},{"x":39,"y":9.879689124727953},{"x":40,"y":9.626025789592271},{"x":41,"y":10.54500955451332},{"x":42,"y":10.523583391437862},{"x":43,"y":10.149905360813595},{"x":44,"y":10.008947093247242},{"x":45,"y":9.8497518309387},{"x":46,"y":9.890473911663728},{"x":47,"y":9.67992074373058},{"x":48,"y":9.670334333834722},{"x":49,"y":9.823140736732784},{"x":50,"y":8.224058542177508},{"x":51,"y":8.223475123805404},{"x":52,"y":8.386921354457723},{"x":53,"y":7.289087220690491},{"x":54,"y":7.406251711301416},{"x":55,"y":7.382520979856899},{"x":56,"y":6.719445127122806},{"x":57,"y":6.595508287562719},{"x":58,"y":6.740844954435563},{"x":59,"y":7.0579847226425505},{"x":60,"y":7.059105076809497},{"x":61,"y":6.98112193072602},{"x":62,"y":5.8318623272924075},{"x":63,"y":5.810518968455871},{"x":64,"y":5.810592542976088},{"x":65,"y":6.319948463861776},{"x":66,"y":6.398841999777533},{"x":67,"y":6.3206780994541685},{"x":68,"y":6.453916147963473},{"x":69,"y":6.4613375825453065},{"x":70,"y":6.426389220370094},{"x":71,"y":7.715227734331422},{"x":72,"y":7.806805663373285},{"x":73,"y":7.76263954069556},{"x":74,"y":8.967789112603208},{"x":75,"y":11.823790545471486},{"x":76,"y":13.265505680119134},{"x":77,"y":13.392300983575383},{"x":78,"y":13.407919500427436},{"x":79,"y":13.555506644342152},{"x":80,"y":13.311549501595065},{"x":81,"y":13.811588135750114},{"x":82,"y":14.084309796296267},{"x":83,"y":14.272687573307056},{"x":84,"y":14.668330190273862},{"x":85,"y":14.693063715614894},{"x":86,"y":14.9458221610733},{"x":87,"y":15.143355158258986},{"x":88,"y":15.423503548056678},{"x":89,"y":15.58615405340359},{"x":90,"y":16.227654608305013},{"x":91,"y":16.08891974196791},{"x":92,"y":15.308006586386862},{"x":93,"y":15.124471868557665},{"x":94,"y":14.995433223097955},{"x":95,"y":14.711886927338709},{"x":96,"y":12.828275420215531},{"x":97,"y":12.877296541143176},{"x":98,"y":12.998584636155503},{"x":99,"y":13.560526153224165},{"x":100,"y":13.532406442630455},{"x":101,"y":13.597549842444174},{"x":102,"y":13.31167724640271},{"x":103,"y":13.525822079047348},{"x":104,"y":16.321644515692945},{"x":105,"y":15.800652936791233},{"x":106,"y":16.0768665073427},{"x":107,"y":15.345867150344864},{"x":108,"y":15.7124393097786},{"x":109,"y":15.553294322333159},{"x":110,"y":15.650105245351542},{"x":111,"y":15.401760240447606},{"x":112,"y":15.154375383054848},{"x":113,"y":15.607091863360585},{"x":114,"y":17.213181137220776},{"x":115,"y":16.737910971641657},{"x":116,"y":17.04880116059669},{"x":117,"y":17.05632645115914},{"x":118,"y":16.33564998037576},{"x":119,"y":16.295400334604693},{"x":120,"y":16.022324323953285},{"x":121,"y":16.688453327541787},{"x":122,"y":16.63577334252934},{"x":123,"y":16.597171961088627},{"x":124,"y":17.236690135348482},{"x":125,"y":13.969544777327606},{"x":126,"y":13.995807577558695},{"x":127,"y":14.062186817215963},{"x":128,"y":26.632840857722204},{"x":129,"y":27.257373104159683},{"x":130,"y":27.307150775189243},{"x":131,"y":28.14039311389436},{"x":132,"y":28.223248358309792},{"x":133,"y":28.160427334373942},{"x":134,"y":28.02956129922564},{"x":135,"y":27.22715356048239},{"x":136,"y":27.19925941531278},{"x":137,"y":27.176921120050093},{"x":138,"y":27.233667674314063},{"x":139,"y":27.12752405107435},{"x":140,"y":26.95336252038779},{"x":141,"y":26.905696652731635},{"x":142,"y":26.56115329898065},{"x":143,"y":26.56505036956991},{"x":144,"y":26.500108479656213},{"x":145,"y":25.926766348685444},{"x":146,"y":26.813638609257335},{"x":147,"y":26.96227719650604},{"x":148,"y":28.21703208447544}]}],"marks":[{"type":"line","from":{"data":"0f082637-8c6e-4796-97b5-c099ae8b8394"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"stroke":{"value":"red"},"strokeWidth":{"value":3},"strokeOpacity":{"value":1}}}}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"0f082637-8c6e-4796-97b5-c099ae8b8394","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"0f082637-8c6e-4796-97b5-c099ae8b8394","field":"data.y"}}],"axes":[{"type":"x","scale":"x","title":"Time","titleOffset":40,"grid":true},{"type":"y","scale":"y","title":"Annualized Volatility (in %)","titleOffset":65,"grid":true}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 800, :height 494.4376, :padding {:top 10, :left 80, :bottom 50, :right 10}, :data [{:name \"0f082637-8c6e-4796-97b5-c099ae8b8394\", :values ({:x 0, :y 8.541649284612566} {:x 1, :y 10.293680330069462} {:x 2, :y 10.179577572502227} {:x 3, :y 10.357417880899288} {:x 4, :y 10.350585946226577} {:x 5, :y 10.521521058247318} {:x 6, :y 11.660247760694062} {:x 7, :y 12.072235941430446} {:x 8, :y 12.370674665896919} {:x 9, :y 12.734309916822625} {:x 10, :y 12.909395376919067} {:x 11, :y 12.87735283727527} {:x 12, :y 13.899682244133551} {:x 13, :y 13.669314599960305} {:x 14, :y 13.601957121843473} {:x 15, :y 14.35874330739241} {:x 16, :y 14.358222970613822} {:x 17, :y 14.292811445696307} {:x 18, :y 14.277834236713677} {:x 19, :y 14.36418207176752} {:x 20, :y 14.154817002500822} {:x 21, :y 14.163146632271538} {:x 22, :y 13.0265618128831} {:x 23, :y 12.941945805212349} {:x 24, :y 13.013640899280562} {:x 25, :y 13.016185165205208} {:x 26, :y 12.948931989385782} {:x 27, :y 12.036506731258179} {:x 28, :y 11.420382616756973} {:x 29, :y 11.915000916189618} {:x 30, :y 10.727566853039603} {:x 31, :y 10.671102438405958} {:x 32, :y 11.508597597825693} {:x 33, :y 10.65539420191013} {:x 34, :y 10.721924861607969} {:x 35, :y 11.242200628414423} {:x 36, :y 10.65760777057113} {:x 37, :y 10.67075406806816} {:x 38, :y 9.88189765712977} {:x 39, :y 9.879689124727953} {:x 40, :y 9.626025789592271} {:x 41, :y 10.54500955451332} {:x 42, :y 10.523583391437862} {:x 43, :y 10.149905360813595} {:x 44, :y 10.008947093247242} {:x 45, :y 9.8497518309387} {:x 46, :y 9.890473911663728} {:x 47, :y 9.67992074373058} {:x 48, :y 9.670334333834722} {:x 49, :y 9.823140736732784} {:x 50, :y 8.224058542177508} {:x 51, :y 8.223475123805404} {:x 52, :y 8.386921354457723} {:x 53, :y 7.289087220690491} {:x 54, :y 7.406251711301416} {:x 55, :y 7.382520979856899} {:x 56, :y 6.719445127122806} {:x 57, :y 6.595508287562719} {:x 58, :y 6.740844954435563} {:x 59, :y 7.0579847226425505} {:x 60, :y 7.059105076809497} {:x 61, :y 6.98112193072602} {:x 62, :y 5.8318623272924075} {:x 63, :y 5.810518968455871} {:x 64, :y 5.810592542976088} {:x 65, :y 6.319948463861776} {:x 66, :y 6.398841999777533} {:x 67, :y 6.3206780994541685} {:x 68, :y 6.453916147963473} {:x 69, :y 6.4613375825453065} {:x 70, :y 6.426389220370094} {:x 71, :y 7.715227734331422} {:x 72, :y 7.806805663373285} {:x 73, :y 7.76263954069556} {:x 74, :y 8.967789112603208} {:x 75, :y 11.823790545471486} {:x 76, :y 13.265505680119134} {:x 77, :y 13.392300983575383} {:x 78, :y 13.407919500427436} {:x 79, :y 13.555506644342152} {:x 80, :y 13.311549501595065} {:x 81, :y 13.811588135750114} {:x 82, :y 14.084309796296267} {:x 83, :y 14.272687573307056} {:x 84, :y 14.668330190273862} {:x 85, :y 14.693063715614894} {:x 86, :y 14.9458221610733} {:x 87, :y 15.143355158258986} {:x 88, :y 15.423503548056678} {:x 89, :y 15.58615405340359} {:x 90, :y 16.227654608305013} {:x 91, :y 16.08891974196791} {:x 92, :y 15.308006586386862} {:x 93, :y 15.124471868557665} {:x 94, :y 14.995433223097955} {:x 95, :y 14.711886927338709} {:x 96, :y 12.828275420215531} {:x 97, :y 12.877296541143176} {:x 98, :y 12.998584636155503} {:x 99, :y 13.560526153224165} {:x 100, :y 13.532406442630455} {:x 101, :y 13.597549842444174} {:x 102, :y 13.31167724640271} {:x 103, :y 13.525822079047348} {:x 104, :y 16.321644515692945} {:x 105, :y 15.800652936791233} {:x 106, :y 16.0768665073427} {:x 107, :y 15.345867150344864} {:x 108, :y 15.7124393097786} {:x 109, :y 15.553294322333159} {:x 110, :y 15.650105245351542} {:x 111, :y 15.401760240447606} {:x 112, :y 15.154375383054848} {:x 113, :y 15.607091863360585} {:x 114, :y 17.213181137220776} {:x 115, :y 16.737910971641657} {:x 116, :y 17.04880116059669} {:x 117, :y 17.05632645115914} {:x 118, :y 16.33564998037576} {:x 119, :y 16.295400334604693} {:x 120, :y 16.022324323953285} {:x 121, :y 16.688453327541787} {:x 122, :y 16.63577334252934} {:x 123, :y 16.597171961088627} {:x 124, :y 17.236690135348482} {:x 125, :y 13.969544777327606} {:x 126, :y 13.995807577558695} {:x 127, :y 14.062186817215963} {:x 128, :y 26.632840857722204} {:x 129, :y 27.257373104159683} {:x 130, :y 27.307150775189243} {:x 131, :y 28.14039311389436} {:x 132, :y 28.223248358309792} {:x 133, :y 28.160427334373942} {:x 134, :y 28.02956129922564} {:x 135, :y 27.22715356048239} {:x 136, :y 27.19925941531278} {:x 137, :y 27.176921120050093} {:x 138, :y 27.233667674314063} {:x 139, :y 27.12752405107435} {:x 140, :y 26.95336252038779} {:x 141, :y 26.905696652731635} {:x 142, :y 26.56115329898065} {:x 143, :y 26.56505036956991} {:x 144, :y 26.500108479656213} {:x 145, :y 25.926766348685444} {:x 146, :y 26.813638609257335} {:x 147, :y 26.96227719650604} {:x 148, :y 28.21703208447544})}], :marks [{:type \"line\", :from {:data \"0f082637-8c6e-4796-97b5-c099ae8b8394\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :stroke {:value \"red\"}, :strokeWidth {:value 3}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"0f082637-8c6e-4796-97b5-c099ae8b8394\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"0f082637-8c6e-4796-97b5-c099ae8b8394\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\", :title \"Time\", :titleOffset 40, :grid true} {:type \"y\", :scale \"y\", :title \"Annualized Volatility (in %)\", :titleOffset 65, :grid true}]}}"}
;; <=
